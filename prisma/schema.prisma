generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ucode {
  id           String   @id @default(cuid())
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  otp          String?
  email        String?
  userId       String   @unique
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentProfile {
  id                 String     @id @default(cuid())
  profession         String?
  organization       String?
  location           String?
  description        String?
  userId             String     @unique
  chatRoomsAsStudent ChatRoom[] @relation("StudentProfileToChatRoom")
  user               Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExpertProfile {
  id                 String     @id @default(cuid())
  profession         String?
  organization       String?
  location           String?
  description        String?
  experience         String?
  hourlyRate         String?
  skills             String[]
  availableDays      String[]
  availableTime      String[]
  stripeAccountId    String?
  isOnboardCompleted Boolean    @default(false)
  userId             String     @unique
  chatRoomsAsExpert  ChatRoom[] @relation("ExpertProfileToChatRoom")
  user               Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Booking {
  id              String        @id @default(cuid())
  studentId       String?
  expertId        String?
  date            DateTime
  expertDateTime  DateTime
  studentDateTime DateTime
  meetingLink     String?
  sessionDetails  Json
  sessionDuration Int
  status          BookingStatus @default(PENDING)
  answer1         String?
  answer2         String?
  answer3         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  expert          Users?        @relation("ExpertBookings", fields: [expertId], references: [id])
  student         Users?        @relation("StudentBookings", fields: [studentId], references: [id])
  review          Review?
  transaction     Transaction?
}

model Transaction {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  deletedAt       DateTime?         @map("deleted_at")
  bookingId       String?           @unique
  storeId         String?           @map("store_id")
  userId          String?           @map("user_id")
  orderId         String?           @map("order_id")
  type            String?           @default("order")
  withdrawVia     WithdrawalMethod? @default(WALLET) @map("withdraw_via")
  provider        String?
  providerId      String?
  referenceNumber String?           @map("reference_number")
  rawStatus       String?           @map("raw_status")
  status          PaymentStatus?    @default(PENDING)
  amount          Decimal?
  currency        String?
  paidAmount      Decimal?          @map("paid_amount")
  paidCurrency    String?           @map("paid_currency")
  refundDate      DateTime?
  refundReason    String?
  booking         Booking?          @relation(fields: [bookingId], references: [id])
  user            Users?            @relation("Transactions", fields: [userId], references: [id])

  @@map("transactions")
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  description String?
  bookingId   String?  @unique
  studentId   String
  expertId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  booking     Booking? @relation(fields: [bookingId], references: [id])
  expert      Users    @relation("ExpertReview", fields: [expertId], references: [id])
  student     Users    @relation("StudentReview", fields: [studentId], references: [id])
}

model Notification {
  id          String           @id @default(cuid())
  title       String
  message     String
  type        NotificationType
  isRead      Boolean          @default(false)
  image       String?
  recipientId String
  createdAt   DateTime         @default(now())
  recipient   Users            @relation(fields: [recipientId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id        String          @id @default(cuid())
  studentId String?
  expertId  String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  expert    ExpertProfile?  @relation("ExpertProfileToChatRoom", fields: [expertId], references: [id])
  student   StudentProfile? @relation("StudentProfileToChatRoom", fields: [studentId], references: [id])
  messages  Message[]

  @@unique([studentId, expertId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderType Role
  senderId   String
  chatRoomId String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
}

model PaymentMethod {
  id                    String  @id @default(cuid())
  stripePaymentMethodId String  @unique
  customerID            String  @unique
  brand                 String?
  last4                 String?
  expMonth              Int?
  expYear               Int?
  userId                String
  user                  Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Users {
  id              String          @id @default(cuid())
  linkedInId      String          @unique
  name            String?
  email           String?         @unique
  password        String?
  lastLogin       DateTime?
  image           String?
  activeProfile   Role            @default(STUDENT)
  timezone        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  expertBookings  Booking[]       @relation("ExpertBookings")
  studentBookings Booking[]       @relation("StudentBookings")
  expertProfile   ExpertProfile?
  notifications   Notification[]
  PaymentMethod   PaymentMethod[]
  expertReviews   Review[]        @relation("ExpertReview")
  studentReviews  Review[]        @relation("StudentReview")
  studentProfile  StudentProfile?
  ucode           Ucode?
  transactions    Transaction[]   @relation("Transactions")
}

enum BookingStatus {
  PENDING
  UPCOMING
  MISSED
  COMPLETED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
  REFUNDED
}

enum WithdrawalMethod {
  WALLET
  BANK
  STRIPE
}

enum Role {
  STUDENT
  EXPERT
  ADMIN
}

enum NotificationType {
  BOOKING_REQUESTED
  BOOKING_CONFIRMED
  BOOKING_CANCELLED_BY_STUDENT
  BOOKING_CANCELLED_BY_EXPERT
  SESSION_STARTED
  SESSION_COMPLETED
  REVIEW_RECEIVED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  EXPERT_EARNED_MONEY
  SYSTEM_ALERT
}
