generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ucode {
  id           String   @id @default(cuid())
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  otp          String?
  email        String?
  userId       String   @unique
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminProfile {
  id         String  @id @default(cuid())
  userId     String  @unique
  first_name String?
  last_name  String
  user       Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentProfile {
  id           String  @id @default(cuid())
  profession   String?
  organization String?
  location     String?
  description  String?
  userId       String  @unique
  // chatRoomsAsStudent ChatRoom[] @relation("StudentProfileToChatRoom")
  user         Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExpertProfile {
  id                 String              @id @default(cuid())
  profession         String?
  organization       String?
  location           String?
  description        String?
  experience         String?
  hourlyRate         Int?
  skills             String[]
  availableDays      String[]
  availableTime      String[]
  status             ExpertProfileStatus @default(ACTIVE)
  stripeAccountId    String?             @unique
  isOnboardCompleted Boolean             @default(false)
  userId             String              @unique
  // chatRoomsAsExpert  ChatRoom[]          @relation("ExpertProfileToChatRoom")
  user               Users               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Booking {
  id              String        @id @default(cuid())
  studentId       String?
  expertId        String?
  date            DateTime
  expertDateTime  DateTime?
  studentDateTime DateTime?
  meetingLink     String?
  meetingID       BigInt?       @unique
  sessionDetails  Json
  sessionDuration Int
  status          BookingStatus @default(PENDING)
  refund_reason   String?
  answer1         String?
  answer2         String?
  answer3         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  expert          Users?        @relation("ExpertBookings", fields: [expertId], references: [id])
  student         Users?        @relation("StudentBookings", fields: [studentId], references: [id])
  review          Review?
  transaction     Transaction?
}

model Transaction {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  deletedAt       DateTime?         @map("deleted_at")
  bookingId       String?           @unique
  storeId         String?           @map("store_id")
  userId          String?           @map("user_id")
  orderId         String?           @map("order_id")
  type            String?           @default("order")
  withdrawVia     WithdrawalMethod? @default(WALLET) @map("withdraw_via")
  provider        String?
  providerId      String?
  referenceNumber String?           @map("reference_number")
  rawStatus       String?           @map("raw_status")
  status          PaymentStatus?    @default(PENDING)
  amount          Float?
  currency        String?
  paidAmount      Decimal?          @map("paid_amount")
  paidCurrency    String?           @map("paid_currency")
  refundDate      DateTime?
  refundReason    String?
  booking         Booking?          @relation(fields: [bookingId], references: [id])
  user            Users?            @relation("Transactions", fields: [userId], references: [id])

  @@map("transactions")
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  description String?
  bookingId   String?  @unique
  studentId   String
  expertId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  booking     Booking? @relation(fields: [bookingId], references: [id])
  expert      Users    @relation("ExpertReview", fields: [expertId], references: [id])
  student     Users    @relation("StudentReview", fields: [studentId], references: [id])
}

model Notification {
  id          String           @id @default(cuid())
  title       String
  message     String
  type        NotificationType
  isRead      Boolean          @default(false)
  image       String?
  meta        Json
  recipientId String
  sender_id   String
  recipient   Users            @relation("UserReceivedNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      Users            @relation("UserSentNotifications", fields: [sender_id], references: [id], onDelete: Cascade)
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
}

model PaymentMethod {
  id         String   @id @default(cuid())
  provider   String
  method_id  String   @unique
  brand      String?
  last4      String?
  expMonth   Int?
  expYear    Int?
  userId     String
  default    Boolean  @default(false)
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Users {
  id                    String          @id @default(cuid())
  linkedin_id           String          @unique
  name                  String?
  email                 String?         @unique
  phone                 String?
  password              String?
  lastLogin             DateTime?
  image                 String?
  activeProfile         Role            @default(STUDENT)
  timezone              String          @default("UTC")
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  expertBookings        Booking[]       @relation("ExpertBookings")
  studentBookings       Booking[]       @relation("StudentBookings")
  expertProfile         ExpertProfile?
  customer_id           String?
  payment_methods       PaymentMethod[]
  expertReviews         Review[]        @relation("ExpertReview")
  studentReviews        Review[]        @relation("StudentReview")
  studentProfile        StudentProfile?
  adminProfile          AdminProfile?
  ucode                 Ucode?
  transactions          Transaction[]   @relation("Transactions")
  sentConversations     Conversation[]  @relation("SentConversations")
  receivedConversations Conversation[]  @relation("ReceivedConversations")
  sentMessages          Message[]       @relation("SentMessages")
  receivedMessages      Message[]       @relation("ReceivedMessages")
  sentNotifications     Notification[]  @relation("UserSentNotifications")
  receivedNotifications Notification[]  @relation("UserReceivedNotifications")
}

enum BookingStatus {
  PENDING
  UPCOMING
  MISSED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
  REFUNDED
}

enum WithdrawalMethod {
  WALLET
  BANK
  STRIPE
}

model Conversation {
  id            String    @id @default(cuid())
  senderId      String
  recipientId   String
  senderRole    Role
  recipientRole Role
  sender        Users     @relation("SentConversations", fields: [senderId], references: [id])
  recipient     Users     @relation("ReceivedConversations", fields: [recipientId], references: [id])
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([senderId, recipientId, senderRole, recipientRole])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  recipientId    String
  senderRole     Role
  recipientRole  Role
  content        String
  read_message   Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         Users        @relation("SentMessages", fields: [senderId], references: [id])
  recipient      Users        @relation("ReceivedMessages", fields: [recipientId], references: [id])
  createdAt      DateTime     @default(now())
}

enum Role {
  STUDENT
  EXPERT
  ADMIN
}

enum NotificationType {
  BOOKING_CANCELLED_BY_EXPERT
  BOOKING_CANCELLED_BY_STUDENT
  BOOKING_CONFIRMED
  BOOKING_REQUESTED
  EXPERT_EARNED_MONEY
  PAYMENT_FAILED
  PAYMENT_SUCCESS
  REFUND_REVIEW
  REVIEW_RECEIVED
  SESSION_COMPLETED
  SESSION_STARTED
  SYSTEM_ALERT
}


enum ExpertProfileStatus {
  ACTIVE
  SUSPENDED
}
