// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String @id @default(cuid())
  linkedInId String @unique

  name      String?
  email     String?   @unique //for admin
  password  String? //for admin
  lastLogin DateTime?
  activeProfile Role @default(STUDENT)

  studentProfile StudentProfile?
  expertProfile  ExpertProfile?
  ucode          Ucode[]

  studentBookings Booking[] @relation("StudentBookings")
  expertBookings  Booking[] @relation("ExpertBookings")

  studentReviews Review[]       @relation("StudentReview")
  expertReviews  Review[]       @relation("ExpertReview")
  notifications  Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ucode {
  id           String  @id @default(cuid())
  accessToken  String? //Linkedin access token
  refreshToken String? //Linkedin refresh token

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentProfile {
  id String @id @default(cuid())

  profession   String?
  organization String?
  location     String?
  description  String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  chatRoomsAsStudent ChatRoom[] @relation("StudentProfileToChatRoom")
}

model ExpertProfile {
  id String @id @default(cuid())

  profession    String?
  organization  String?
  location      String?
  description   String?
  experience    String?
  hourlyRate    String?
  skills        String[]
  availableDays String[]
  availableTime String[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  chatRoomsAsExpert ChatRoom[] @relation("ExpertProfileToChatRoom")
}

model Booking {
  id              String        @id @default(cuid())
  studentId       String?
  expertId        String?
  date            DateTime
  time            String
  meetingLink     String?
  sessionDetails  Json
  sessionDuration Int
  status          BookingStatus @default(UPCOMING)

  student     User?        @relation("StudentBookings", fields: [studentId], references: [id], onDelete: SetNull)
  expert      User?        @relation("ExpertBookings", fields: [expertId], references: [id], onDelete: SetNull)
  transaction Transaction?
  review      Review?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id         String            @id @default(cuid())
  bookingId  String?           @unique
  amount     Float
  currency   String
  provider   PaymentProvider
  providerId String
  status     TransactionStatus

  refundDate   DateTime?
  refundReason String?

  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id          String  @id @default(cuid())
  rating      Int
  description String?

  bookingId   String?   @unique
  booking     Booking?  @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  studentId   String
  expertId    String 

  student     User       @relation("StudentReview", fields: [studentId], references: [id])
  expert      User       @relation("ExpertReview", fields: [expertId], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// | Field       | মানে                       |
// | ----------- | -------------------------- |
// | `studentId` | কে review দিল              |
// | `expertId`  | কাকে review দিল            |
// | `bookingId` | কোন session-এর জন্য review |



model Notification {
  id      String           @id @default(cuid())
  title   String
  message String
  type    NotificationType
  isRead  Boolean          @default(false)

  recipientId String
  recipient   User   @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}


model ChatRoom {
  id           String   @id @default(cuid())

  studentId    String?
  expertId     String?

  student      StudentProfile? @relation("StudentProfileToChatRoom", fields: [studentId], references: [id],  onDelete: SetNull)
  expert       ExpertProfile? @relation("ExpertProfileToChatRoom", fields: [expertId], references: [id], onDelete: SetNull)

  messages     Message[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model Message {
  id           String   @id @default(cuid())
  content      String

  senderType   Role   
  senderId     String 
  chatRoomId   String

  chatRoom     ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
}



enum BookingStatus {
  UPCOMING
  MISSED
  COMPLETED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum Role {
  STUDENT
  EXPERT
  ADMIN
}

enum NotificationType {
  BOOKING_REQUESTED          
  BOOKING_CONFIRMED         
  BOOKING_CANCELLED_BY_STUDENT
  BOOKING_CANCELLED_BY_EXPERT
  SESSION_STARTED            
  SESSION_COMPLETED          
  REVIEW_RECEIVED             
  PAYMENT_SUCCESS            
  PAYMENT_FAILED            
  EXPERT_EARNED_MONEY        
  SYSTEM_ALERT              
}



