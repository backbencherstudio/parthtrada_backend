// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String @id @default(cuid())
  linkedInId String @unique

  name          String?
  email         String?   @unique //for admin
  password      String? //for admin
  lastLogin     DateTime?
  image         String?
  activeProfile Role      @default(STUDENT)
  timeZone      String?

  studentProfile StudentProfile?
  expertProfile  ExpertProfile?
  ucode          Ucode[]

  studentBookings Booking[] @relation("StudentBookings")
  expertBookings  Booking[] @relation("ExpertBookings")

  studentReviews Review[]       @relation("StudentReview")
  expertReviews  Review[]       @relation("ExpertReview")
  notifications  Notification[]
  transactions   Transaction[]  @relation("Transactions")

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  PaymentMethod PaymentMethod[]
}

model Ucode {
  id           String  @id @default(cuid())
  accessToken  String? //Linkedin access token
  refreshToken String? //Linkedin refresh token

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  otp   String?
  email String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentProfile {
  id String @id @default(cuid())

  profession   String?
  organization String?
  location     String?
  description  String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  chatRoomsAsStudent ChatRoom[] @relation("StudentProfileToChatRoom")
}

model ExpertProfile {
  id String @id @default(cuid())

  profession    String?
  organization  String?
  location      String?
  description   String?
  experience    String?
  hourlyRate    String?
  skills        String[]
  availableDays String[]
  availableTime String[]

  stripeAccountId    String?
  isOnboardCompleted Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  chatRoomsAsExpert ChatRoom[] @relation("ExpertProfileToChatRoom")
}

model Booking {
  id        String   @id @default(cuid())
  studentId String?
  expertId  String?
  date      DateTime

  expertDateTime  DateTime
  studentDateTime DateTime

  meetingLink     String?
  sessionDetails  Json
  sessionDuration Int
  status          BookingStatus @default(PENDING)

  answer1 String?
  answer2 String?
  answer3 String?

  student     User?        @relation("StudentBookings", fields: [studentId], references: [id], onDelete: SetNull)
  expert      User?        @relation("ExpertBookings", fields: [expertId], references: [id], onDelete: SetNull)
  transaction Transaction?

  review Review?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  bookingId String?  @unique
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  storeId String? @map("store_id")
  userId  String? @map("user_id")
  user    User?   @relation("Transactions", fields: [userId], references: [id])

  orderId     String?           @map("order_id")
  type        String?           @default("order")
  withdrawVia WithdrawalMethod? @default(WALLET) @map("withdraw_via")

  // Payment details
  provider        String?
  providerId      String?
  referenceNumber String?        @map("reference_number")
  rawStatus       String?        @map("raw_status")
  status          PaymentStatus? @default(PENDING)

  // Amount & currency
  amount       Decimal?
  currency     String?
  paidAmount   Decimal? @map("paid_amount")
  paidCurrency String?  @map("paid_currency")

  // Refund info
  refundDate   DateTime?
  refundReason String?

  @@map("transactions")
}

model Review {
  id          String  @id @default(cuid())
  rating      Int
  description String?

  bookingId String?  @unique
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  studentId String
  expertId  String

  student User @relation("StudentReview", fields: [studentId], references: [id])
  expert  User @relation("ExpertReview", fields: [expertId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// | Field       | মানে                        |
// | ----------- | -------------------------- |
// | `studentId` | কে review দিল              |
// | `expertId`  | কাকে review দিল            |
// | `bookingId` | কোন session-এর জন্য review |

model Notification {
  id          String           @id @default(cuid())
  title       String
  message     String
  type        NotificationType
  isRead      Boolean          @default(false)
  image       String?
  recipientId String
  recipient   User             @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model ChatRoom {
  id String @id @default(cuid())

  studentId String?
  expertId  String?

  student StudentProfile? @relation("StudentProfileToChatRoom", fields: [studentId], references: [id], onDelete: SetNull)
  expert  ExpertProfile?  @relation("ExpertProfileToChatRoom", fields: [expertId], references: [id], onDelete: SetNull)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, expertId])
}

model Message {
  id      String @id @default(cuid())
  content String

  senderType Role
  senderId   String
  chatRoomId String
  isRead     Boolean @default(false)

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model PaymentMethod {
  id String @id @default(cuid())

  stripePaymentMethodId String @unique

  brand    String?
  last4    String?
  expMonth Int?
  expYear  Int?
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
}

enum BookingStatus {
  PENDING
  UPCOMING
  MISSED
  COMPLETED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
  REFUNDED
}

enum WithdrawalMethod {
  WALLET
  BANK
  STRIPE
}

enum Role {
  STUDENT
  EXPERT
  ADMIN
}

enum NotificationType {
  BOOKING_REQUESTED
  BOOKING_CONFIRMED
  BOOKING_CANCELLED_BY_STUDENT
  BOOKING_CANCELLED_BY_EXPERT
  SESSION_STARTED
  SESSION_COMPLETED
  REVIEW_RECEIVED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  EXPERT_EARNED_MONEY
  SYSTEM_ALERT
}
